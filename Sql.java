/* Generated By:JavaCC: Do not edit this line. Sql.java */
    import java.io.PrintStream;
    import java.util.*;
    import java.io.*;
    import java.io.FileNotFoundException;
    import java.lang.reflect.Method;
    import java.lang.reflect.Type;
    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Method;
    import java.lang.reflect.Type;
    import java.util.Locale;
    import static java.lang.System.out;
    import java.io.File;
    import java.io.IOException;

    public class Sql implements SqlConstants {
        public static void main(String[] args)
            throws ParseException, TokenMgrError, IOException {

                Sql parser;

                if (args.length == 1) {

                  try {
                    parser = new Sql(new FileInputStream(args[0]));
                  }
                  catch (java.io.FileNotFoundException e) {
                    System.out.println("ERR: The SQL file " + args[0] + " was not found.");
                    return;
                  }
                  parser.Start(System.out);
                }
                else {
                  parser = new Sql(System.in);
                  parser.Start(System.out);
                }
        }

/* Specifying the parser using BNF productions */
/* The input to the parser consists of a single statement so far:
 *     Start --> Statement
 */
  static final public void Start(PrintStream printStream) throws ParseException, IOException {
    SelectStatement stmt;
        String inputFileName1 = ".//s0.txt";
        String inputFileName2 = ".//s1.txt";
        //String inputFileName = ".\\s0.txt"; // Try this if the other
        // Establish a input stream so that we can read the file
        StudentReader sreader = new StudentReader(inputFileName1);
        CourseReader creader = new CourseReader(inputFileName2);


        // Read the number of entries first
        int numStudents = 0;
        if (sreader.hasNext()) {
            numStudents = sreader.getSize();
        }

        int numCourse = 0;
        if (sreader.hasNext()) {
            numCourse = creader.getSize();
        }

        // Now that we know the size, we can create an array with that size
        Student[] students = new Student[numStudents];
        Course [] courses = new Course[numCourse];

        // Read the rest of the input file
        int i = 0;
        while (sreader.hasNext()) {
            Student s = sreader.readStudent();
            students[i] = s;
            i = i + 1;
        }

        int j = 0;
        while (creader.hasNext()) {
            Course c = creader.readCourse();
            courses[j] = c;
            j = j + 1;
        }

        while(true) {

            stmt = Statement(printStream);

            ArrayList result = new ArrayList();


            if(stmt.database != null) {

                        try {

                            boolean success = (
                            new File(stmt.database)).mkdir();

                            if (success) {
                            System.out.println("Directory: "
                            + stmt.database + " created");
                            }

                        } catch (Exception e) {
                              e.printStackTrace();
                        }
            }

            else if(stmt.where == null && stmt.from.equals("Courses")) {

                    for(int k=0; k<numCourse; k++) {
                        result.add((Course)courses[k]);
                    }
            }

            else if(stmt.where == null && stmt.from.equals("Students")) {
                    for(int k=0; k<numStudents; k++) {
                        result.add((Student)students[k]);
                    }
            }

            else {

                        String[] val = stmt.where.split("=");


                        if (stmt.from.equals("Courses")) {


                            if (val[0].equals("1")) {


                                for(int k=0; k<numCourse; k++) {


                                    if (val[1].equals(courses[k].getName())) {
                                        result.add((Course)courses[k]);
                                    }
                                }
                            }


                            if (val[0].equals("2")) {

                                for(int k=0; k<numCourse; k++) {

                                    if (Integer.parseInt(val[1]) == courses[k].getID()) {
                                        result.add((Course)courses[k]);
                                    }
                                }
                            }

                            if (val[0].equals("3")) {

                                for(int k=0; k<numCourse; k++) {

                                    if (val[1].equals(courses[k].getSemester())) {
                                        result.add((Course)courses[k]);
                                    }
                                }
                            }

                        }


                        if (stmt.from.equals("Students")) {


                            if (val[0].equals("1")) {

                                for(int k=0; k<numStudents; k++) {

                                    if (val[1].equals(students[k].getName())) {
                                        result.add((Student)students[k]);
                                    }
                                }
                            }

                            if (val[0].equals("2")) {

                                for(int k=0; k<numStudents; k++) {

                                    if (Integer.parseInt(val[1]) == students[k].getID()) {
                                        result.add((Student)students[k]);
                                    }
                                }
                            }


                            if (val[0].equals("3")) {

                                for(int k=0; k<numStudents; k++) {

                                    if (val[1].equals(students[k].getMajor())) {
                                        result.add((Student)students[k]);
                                    }
                                }
                            }


                            if (val[0].equals("4")) {

                                for(int k=0; k<numStudents; k++) {

                                    if (Integer.parseInt(val[1]) == students[k].getGPA()) {
                                        result.add((Student)students[k]);
                                    }
                                }
                            }
                        }
            }

            if(stmt.database == null) {

                String[] attrlist = stmt.select.split(", ");
                ArrayList<Method> usedMethods = new ArrayList<Method>();

                if(stmt.select != "*")  {

                    Class test  = result.get(0).getClass();
                    Method[] allMethods = test.getDeclaredMethods();

                    for (Method m : allMethods) {

                        for(int p = 0; p<attrlist.length; p++) {

                            if(m.getName().toLowerCase().contains(attrlist[p]) && m.getName().toLowerCase().contains("get")) {

                                usedMethods.add(m);

                            }
                        }
                    }
                }

                Iterator it = result.iterator();


                while(it.hasNext()) {
                    Object temp = it.next();
                    if(usedMethods.size() == 0) {
                        System.out.println(temp);
                    }

                    else {

                        for(int p = 0; p<usedMethods.size(); p++) {
                            try {
                                System.out.print(usedMethods.get(p).invoke(temp));
                                System.out.print(" ");
                            }
                            catch (IllegalAccessException x) {
                                    x.printStackTrace();
                            }
                            catch (InvocationTargetException x) {
                                    x.printStackTrace();
                            }
                        }
                        System.out.println("");
                    }
                }
            }

        }
  }

/* A Statement so far is defined as follows:
 *
 *    Statement --> select *
 *               |  Select *
 *               |  SELECT *
 */
  static final public SelectStatement Statement(PrintStream printStream) throws ParseException {
    Token t;
    SelectStatement ss = new SelectStatement();
    StringBuffer buffer = new StringBuffer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXIT:
      t = jj_consume_token(EXIT);
      t = jj_consume_token(SEMICOLON);
          System.exit(0);
      break;
    case CREATE:
      t = jj_consume_token(CREATE);
          buffer.append(t.image);
      t = jj_consume_token(SPACE);
          buffer.append(t.image);
      t = jj_consume_token(DATABASE);
          buffer.append(t.image);
      t = jj_consume_token(SPACE);
          buffer.append(t.image);
      t = jj_consume_token(ALPHANUMERIC);
          buffer.append(t.image);
          ss.database = t.image;
      t = jj_consume_token(SEMICOLON);
          printStream.println("    -> " + buffer);
          {if (true) return ss;}
      break;
    case SELECT:
      t = jj_consume_token(SELECT);
          buffer.append(t.image);
      t = jj_consume_token(SPACE);
          buffer.append(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
              buffer.append(t.image);
              ss.select = t.image;
        break;
      case ALPHANUMERIC:
      case LISTATTR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHANUMERIC:
          t = jj_consume_token(ALPHANUMERIC);
                  buffer.append(t.image);
                  ss.select = t.image;
          break;
        case LISTATTR:
          t = jj_consume_token(LISTATTR);
                  buffer.append(t.image);
                  ss.select = t.image;
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(SPACE);
          buffer.append(t.image);
      t = jj_consume_token(FROM);
          buffer.append(t.image);
      t = jj_consume_token(SPACE);
          buffer.append(t.image);
      t = jj_consume_token(ALPHANUMERIC);
          buffer.append(t.image);
          ss.from  = t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        t = jj_consume_token(SEMICOLON);
              buffer.append(t.image);
        break;
      case SPACE:
        t = jj_consume_token(SPACE);
                  buffer.append(t.image);
        t = jj_consume_token(WHERE);
                 buffer.append(t.image);
        t = jj_consume_token(SPACE);
                  buffer.append(t.image);
        t = jj_consume_token(NUMBER);
                  buffer.append(t.image);
                  ss.where = t.image;
        t = jj_consume_token(SPACE);
                  buffer.append(t.image);
        t = jj_consume_token(EQUAL);
                  buffer.append(t.image);
                  ss.where += t.image;
        t = jj_consume_token(SPACE);
                  buffer.append(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          t = jj_consume_token(NUMBER);
                      buffer.append(t.image);
                      ss.where += t.image;
          break;
        case QUOTATION:
          t = jj_consume_token(QUOTATION);
                      buffer.append(t.image);
          t = jj_consume_token(ALPHANUMERIC);
                      ss.where += t.image;
          t = jj_consume_token(QUOTATION);
                      buffer.append(t.image);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t = jj_consume_token(SEMICOLON);
                  buffer.append(t.image);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      printStream.println("    -> " + buffer);
      {if (true) return ss;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SqlTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x30000,0x30400,0x5000,0xa000,0x250,};
   }

  /** Constructor with InputStream. */
  public Sql(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Sql(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Sql(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Sql(SqlTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    }
